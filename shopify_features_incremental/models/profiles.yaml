# This is a sample file, for detailed reference see: https://rudderlabs.github.io/pywht/
models:
  - name: shopify_id_stitcher_incremental_test1
    model_type: id_stitcher
    model_spec:
      validity_time: 24h # 1 day
      entity_key: user
      main_id_type: main_id
      edge_sources:
        - inputs/rsIdentifies
        - inputs/rsTracks
        - inputs/rsPages
        - inputs/rsOrderCreated
        - inputs/rsOrderCancelled
        - inputs/rsCartUpdate
        - inputs/rsCartCreate
        - inputs/androidPrdTracks
        - inputs/androidPrdIdentifies
        - inputs/iosPrdIdentifies
        - inputs/rsFeaturesTable

  - name: WebTracksUnionAndroidTracksUnionIosTracks
    model_type: sql_template
    model_spec:
      validity_time: 24h # 1 day
      materialization:
        output_type: ephemeral
        run_type: discrete
      single_sql: |
        {% with webtracks = this.DeRef("inputs/rsTracks") iosPrdTracks = this.DeRef("inputs/iosPrdTracks")  androidPrdTracks= this.DeRef("inputs/androidPrdTracks") %}
          select user_id,timestamp,anonymous_id from {{webtracks}}
            union all select user_id,timestamp,anonymous_id from {{iosPrdTracks}}
            union all select user_id,timestamp,anonymous_id from {{androidPrdTracks}}
        {% endwith %}
      ids:
        - select: "user_id"
          type: user_id
          entity: user
        - select: "anonymous_id"
          type: anonymous_id
          entity: user
          
  - name: WebIdentifiesUnionAndroidIdentifiesUnionIosIdentifies
    model_type: sql_template
    model_spec:
      validity_time: 24h # 1 day
      materialization:
        output_type: ephemeral
        run_type: discrete
      single_sql: |
        {% with webIdentifies = this.DeRef("inputs/rsIdentifies") androidIdentifies = this.DeRef("inputs/androidPrdIdentifies")  iosIdentifies= this.DeRef("inputs/iosPrdIdentifies") %}
            select user_id,anonymous_id,email,timestamp,first_name from {{webIdentifies}}
            union all 
            select user_id,anonymous_id,email,timestamp,null as first_name from {{androidIdentifies}}
            union all 
            select user_id,anonymous_id,email,timestamp,null as first_name from {{iosIdentifies}}
        {% endwith %}
      ids:
        - select: "user_id"
          type: user_id
          entity: user
        - select: "anonymous_id"
          type: anonymous_id
          entity: user
        - select: "upper(email)"
          type: email
          entity: user

   
# Remove the section below, if you don't want to generate a feature table
  - name: shopify_user_features_incremental_test1
    model_type: feature_table_model
    model_spec:
      validity_time: 24h # 1 day
      entity_key: user
      vars:
       
        #total refund
        - entity_var:
            name: total_refund_incremental
            select: sum(total_price_usd ::real)
            from: inputs/rsOrderCancelled
            where: financial_status in ('paid','refunded','partially_refunded') and timestamp >(select max(valid_at) from shopify_user_features_incremental)
        
        - entity_var:
            name: total_refund_batch
            select: max(total_refund)
            from: inputs/rsFeaturesTable
          
        - entity_var:
            name: total_refund
            # Here we sum the total refund batch with total refund incremental to get the new total_refund. We need to be careful about the nulls. 
            select: case when total_refund_batch is null and total_refund_incremental is null then null else coalesce(total_refund_batch,0) + coalesce(total_refund_incremental,0) end

        - entity_var:
            name: max_timestamp_tracks_incremental
            select: max(timestamp)
            from: models/WebTracksUnionAndroidTracksUnionIosTracks
            where: timestamp >(select max(valid_at) from shopify_user_features_incremental) # Similar to max_timestamp_pages_delta
        - entity_var:
            name: max_timestamp_tracks_batch
            select: max(max_timestamp_tracks)
            from: inputs/rsFeaturesTable

        
        - entity_var:
            name: max_timestamp_tracks
            select: coalesce(max_timestamp_tracks_incremental, max_timestamp_tracks_batch)


        - entity_var:
            name: max_timestamp_pages_incremental
            select: max(timestamp)
            from: inputs/rsPages
            where: timestamp >(select max(valid_at) from shopify_user_features_incremental) # Similar to max_timestamp_pages_delta
        - entity_var:
            name: max_timestamp_pages_batch
            select: max(max_timestamp_pages)
            from: inputs/rsFeaturesTable

        - entity_var:
            name: max_timestamp_pages
            select: coalesce(max_timestamp_pages_incremental, max_timestamp_pages_batch)


        - entity_var:
            name: max_timestamp_bw_tracks_pages
            select: greatest(coalesce(max_timestamp_tracks,max_timestamp_pages),coalesce(max_timestamp_pages,max_timestamp_tracks))
        - entity_var:
            name: days_since_last_seen
            select: datediff(day, date(max_timestamp_bw_tracks_pages),date('{{timestamp.Format("2006-01-02 15:04:05")}}'))

        - entity_var:
            name: refund_count_incremental
            select: count(*)
            from: inputs/rsOrderCancelled
            where: financial_status in ('paid','refunded','partially_refunded') and timestamp >(select max(valid_at) from shopify_user_features_incremental)
        
        - entity_var:
            name: refund_count_batch
            select: max(refund_count)
            from: inputs/rsFeaturesTable
          
        - entity_var:
            name: refund_count
            # Here we sum the total refund batch with total refund incremental to get the new total_refund. We need to be careful about the nulls. 
            select: case when refund_count_batch is null and refund_count_incremental is null then null else coalesce(refund_count_batch,0) + coalesce(refund_count_incremental,0) end
            
        #has credit card
        - entity_var:
            name: has_credit_card_incremental
            select: max(case when lower(payment_details_credit_card_company) in ('visa','american express','mastercard') then 1 else 0 end)
            from: inputs/rsOrderCreated
            where: timestamp >(select max(valid_at) from shopify_user_features_incremental) # Similar to max_timestamp_pages_delta
        
        - entity_var:
            name: has_credit_card_batch
            select: max(has_credit_card)
            from: inputs/rsFeaturesTable

        - entity_var:
            # Max would tickle down to max(incremental, batch); min should do the same  - min(incremental, batch)
            name: has_credit_card
            select: case when has_credit_card_batch is null and has_credit_card_incremental is null then null else greatest(coalesce(has_credit_card_batch,0), coalesce(has_credit_card_incremental,0))  end
        - entity_var:
            name: highest_transaction_value_incremental
            select: max(total_price_usd ::real)
            from: inputs/rsOrderCreated
            where: timestamp >(select max(valid_at) from shopify_user_features_incremental)
        
        - entity_var:
            name: highest_transaction_value_batch
            select: max(highest_transaction_value ::real)
            from: inputs/rsFeaturesTable
          
        - entity_var:
            name: highest_transaction_value
            # Here we sum the total refund batch with total refund incremental to get the new total_refund. We need to be careful about the nulls. 
            select: greatest(coalesce(highest_transaction_value_incremental, highest_transaction_value_batch),coalesce(highest_transaction_value_batch,highest_transaction_value_incremental))
        - entity_var:
            name: first_name_incremental
            select: first_value(first_name)
            from: models/WebIdentifiesUnionAndroidIdentifiesUnionIosIdentifies
            window:
              order_by: 
              - timestamp desc
            where: timestamp >(select max(valid_at) from shopify_user_features_incremental) and first_name is not null and first_name!=''
       

        - entity_var:
            name: first_name_batch
            select: max(first_name)
            from: inputs/rsFeaturesTable
            where: first_name is not null and first_name!=''
        - entity_var:
            name: first_name
            select: coalesce(first_name_incremental,first_name_batch)
        - entity_var:
            name: last_transaction_value_incremental
            from: inputs/rsOrderCreated
            select: first_value(total_price_usd)
            window:
              order_by: 
              - case when TOTAL_PRICE_USD is not null then 2 else 1 end desc
              - timestamp desc
            where: timestamp >(select max(valid_at) from shopify_user_features_incremental)
        - entity_var:
            name: last_transaction_value_batch
            from: inputs/rsFeaturesTable
            select: max(last_transaction_value)
        - entity_var:
            name: last_transaction_value
            select: coalesce(last_transaction_value_incremental,last_transaction_value_batch)
        
        
        - entity_var:
            name: total_units_across_transactions_incremental
            select: sum(array_size( parse_json(products)))
            from: inputs/rsOrderCreated
            where: check_json(products) is null and timestamp >(select max(valid_at) from shopify_user_features_incremental) # This check is to filter out invalid/broken jsons so the query doesn't throw an exception while doing parse_json 
        - entity_var:
            name: total_units_across_transactions_batch
            select: max(total_units_across_transactions)
            from: inputs/rsFeaturesTable
        - entity_var:
            name: total_units_across_transactions
            select: case when total_units_across_transactions_batch is null and total_units_across_transactions_incremental is null then null else coalesce(total_units_across_transactions_batch,0) + coalesce(total_units_across_transactions_incremental,0) end

        - entity_var:
            name: total_transactions_units_incremental
            select: sum(array_size( parse_json(products)))
            from: inputs/rsOrderCreated
            where: check_json(products) is null and timestamp >(select max(valid_at) from shopify_user_features_incremental) # This check is to filter out invalid/broken jsons so the query doesn't throw an exception while doing parse_json 
        - entity_var:
            name: total_transactions_units_batch
            select: max(total_transactions_units)
            from: inputs/rsFeaturesTable
        
        - entity_var:
            name: total_transactions_units
            select: case when total_transactions_units_batch is null and total_transactions_units_incremental is null then null else coalesce(total_transactions_units_batch,0) + coalesce(total_transactions_units_incremental,0) end
        - entity_var:
            name: avg_units_per_transaction
            select: (total_units_across_transactions/total_transactions_units)::real
        
        
        - entity_var:
            name: total_value_across_transactions_incremental
            select: sum(total_price_usd::real)
            from: inputs/rsOrderCreated
            where: check_json(products) is null and timestamp >(select max(valid_at) from shopify_user_features_incremental) # This check is to filter out invalid/broken jsons so the query doesn't throw an exception while doing parse_json 
        - entity_var:
            name: total_value_across_transactions_batch
            select: max(total_value_across_transactions)
            from: inputs/rsFeaturesTable
        - entity_var:
            name: total_value_across_transactions
            select: case when total_value_across_transactions_batch is null and total_value_across_transactions_incremental is null then null else coalesce(total_value_across_transactions_batch,0) + coalesce(total_value_across_transactions_incremental,0) end
        - entity_var:
            name: total_transactions_value_incremental
            select: count(*)
            from: inputs/rsOrderCreated
            where: check_json(products) is null and timestamp >(select max(valid_at) from shopify_user_features_incremental) # This check is to filter out invalid/broken jsons so the query doesn't throw an exception while doing parse_json 
        - entity_var:
            name: total_transactions_value_batch
            select: max(total_transactions_value)
            from: inputs/rsFeaturesTable
        
        - entity_var:
            name: total_transactions_value
            select: case when total_transactions_value_batch is null and total_transactions_value_incremental is null then null else coalesce(total_transactions_value_batch,0) + coalesce(total_transactions_value_incremental,0) end
        - entity_var:
            name: avg_transaction_value
            select: (total_value_across_transactions/total_transactions_value)::real
        - entity_var:
            name: total_products_added_incremental
            select: array_agg(distinct product_id)
            from: inputs/rsCartLineItems
            where: timestamp >(select max(valid_at) from shopify_user_features_incremental)
        - entity_var:
            name: total_products_added_batch
            from: inputs/rsFeaturesTable
            select: any_value(total_products_added)
        


        - entity_var:
            name: total_products_added
            select: ARRAY_CAT(IFNULL(total_products_added_incremental,ARRAY_CONSTRUCT()),IFNULL(total_products_added_batch,ARRAY_CONSTRUCT()))

        


        
        

      features:
        - total_refund
        - max_timestamp_tracks
        - max_timestamp_pages
        - max_timestamp_bw_tracks_pages
        - days_since_last_seen
        - has_credit_card
        - refund_count
        - total_units_across_transactions
        - total_transactions_units
        - total_value_across_transactions
        - total_transactions_value
        - avg_units_per_transaction
        - avg_transaction_value
        - highest_transaction_value
        - first_name
        - last_transaction_value
        - total_products_added
        
